// QR code data for "https://www.berlincreators.de" (25 x 25)
// Generated by Altair's OpenSCAD QR Code Generator
// https://ridercz.github.io/OpenSCAD-QR/
qr_data = [[1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1],
           [1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1],
           [1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1],
           [1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1],
           [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0],
           [1,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
           [0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,0],
           [1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,0,0,1],
           [1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,0,1,1,1,1],
           [0,1,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1],
           [1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,1,0],
           [1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1],
           [1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,1,0,1,1,0,1],
           [1,0,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,1,0,1,1,0],
           [0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0],
           [1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1],
           [1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1],
           [1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0],
           [1,0,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1],
           [1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1],
           [1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1],
           [1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1]];

// Render QR code with default settings (module 1x1x1)
qr_render(qr_data);
//projection() qr_render(qr_data);

// QR code rendering method
module qr_render(data=qr_data, module_size = 1, height = 1) {
    maxmod = len(data) - 1;
    union() {
        for(r = [0 : maxmod]) {
            for(c = [0 : maxmod]) {
                if(data[r][c] == 1){
                    xo = c * module_size;
                    yo = (maxmod - r) * module_size;
                    translate([xo, yo, 0]) cube([module_size, module_size, height]);
                }
            }
        }
    }
}